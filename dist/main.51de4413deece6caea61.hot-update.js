webpackHotUpdate("main",{

/***/ "./src/scenes/Reel.ts":
/*!****************************!*\
  !*** ./src/scenes/Reel.ts ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst pixi_js_1 = __webpack_require__(/*! pixi.js */ \"./node_modules/pixi.js/lib/pixi.es.js\");\r\nconst Symbol_1 = __webpack_require__(/*! ./Symbol */ \"./src/scenes/Symbol.ts\");\r\nconst PIXI = __webpack_require__(/*! pixi.js */ \"./node_modules/pixi.js/lib/pixi.es.js\");\r\nconst gsap_1 = __webpack_require__(/*! gsap */ \"./node_modules/gsap/index.js\");\r\nconst EventEmitter_1 = __webpack_require__(/*! ../system/EventEmitter */ \"./src/system/EventEmitter.ts\");\r\nconst NotificationNames_1 = __webpack_require__(/*! ../system/NotificationNames */ \"./src/system/NotificationNames.ts\");\r\nconst Units_1 = __webpack_require__(/*! ../system/Units */ \"./src/system/Units.ts\");\r\n/**\r\n * Represents a single spinning reel in a slot machine game.\r\n */\r\nclass Reel extends pixi_js_1.Container {\r\n    /**\r\n     * Creates an instance of Reel.\r\n     */\r\n    constructor(reelId) {\r\n        super();\r\n        this._symArray = [];\r\n        this._symbolsPool = [];\r\n        this._spinDuration = 4;\r\n        this._reelId = reelId;\r\n        this.populateSymbolPool();\r\n        this.addInitialSymbol();\r\n        this.addMask();\r\n    }\r\n    /**\r\n     * Populates the symbol pool with textures for spinning.\r\n     */\r\n    populateSymbolPool() {\r\n        for (let i = 1; i < 15; i++) {\r\n            let randomIndex = Math.floor(gsap_1.default.utils.random(1, 8));\r\n            let texture = PIXI.Loader.shared.resources['symbol' + randomIndex].texture;\r\n            let sym = new Symbol_1.Symbol(texture);\r\n            this._symbolsPool.push(sym);\r\n        }\r\n    }\r\n    /**\r\n     * Adds the initial symbol to the reel.\r\n     */\r\n    addInitialSymbol() {\r\n        let randomIndex = Math.floor(gsap_1.default.utils.random(1, 8));\r\n        let texture = PIXI.Loader.shared.resources['symbol' + randomIndex].texture;\r\n        this._symbol = new Symbol_1.Symbol(texture);\r\n        this._symArray.push(this._symbol);\r\n        this.addChild(this._symbol);\r\n    }\r\n    /**\r\n    * Adds a mask to the reel to clip displayed symbols.\r\n    */\r\n    addMask() {\r\n        // Determine the dimensions of the _symbol\r\n        const symbolWidth = this._symbol.width;\r\n        const symbolHeight = this._symbol.height;\r\n        // Create a mask with the same size as the _symbol\r\n        const mask = new pixi_js_1.Graphics();\r\n        mask.beginFill(0xffffff);\r\n        mask.drawRect(0, 0, symbolWidth, symbolHeight);\r\n        mask.endFill();\r\n        // Apply the mask to the _symbol\r\n        this.mask = mask;\r\n        // Add the mask to the container\r\n        this.addChild(mask);\r\n    }\r\n    /**\r\n     * Adds symbols to the virtual reel for spinning.\r\n     */\r\n    addVirtualReels() {\r\n        this._symbolsPool = this.shuffleArray(this._symbolsPool);\r\n        for (let i = 1; i < this._symbolsPool.length; i++) {\r\n            let sym = this._symbolsPool[i];\r\n            sym.x = this._symbol.x;\r\n            sym.y = this._symbol.y - (this._symbol.height * i);\r\n            this.addChild(sym);\r\n            this._symArray.push(sym);\r\n        }\r\n    }\r\n    /**\r\n      * Adds the landing symbol to the reel after spinning.\r\n      */\r\n    addLandingSymbol() {\r\n        // random landing symbol\r\n        let randomIndex = Math.floor(gsap_1.default.utils.random(1, 8));\r\n        let landingTexture = PIXI.Loader.shared.resources['symbol' + randomIndex].texture;\r\n        this._landingSymbol = new Symbol_1.Symbol(landingTexture);\r\n        this._landingSymbol.x = this._symArray[0].x;\r\n        this._landingSymbol.y = this._symArray[this._symArray.length - 1].y - this._symArray[0].height;\r\n        this._symArray.push(this._landingSymbol);\r\n        this.addChild(this._landingSymbol);\r\n    }\r\n    /**\r\n     * Initiates the spin animation of the reel\r\n     */\r\n    spinReel() {\r\n        this.addVirtualReels();\r\n        this.addLandingSymbol();\r\n        for (let i = 0; i < this._symArray.length; i++) {\r\n            gsap_1.default.to(this._symArray[i], {\r\n                y: this._symArray[i].y + this._symArray[i].height * (this._symArray.length - 1), duration: this._spinDuration, ease: \"power1.inOut\", onComplete: () => {\r\n                    if (i == this._symArray.length - 1) {\r\n                        this.resetReels();\r\n                        // last reel finished spinning\r\n                        if (this._reelId == Units_1.Units.MAX_REELS_NUMBER - 1) {\r\n                            EventEmitter_1.EventEmitter.getInstance().emit(NotificationNames_1.NotificationNames.REELS_SPIN_STOPPED);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Resets the reel to its initial state after spinning.\r\n     */\r\n    resetReels() {\r\n        this._symbol = this._landingSymbol;\r\n        this._symArray = [];\r\n        this._symArray.push(this._symbol);\r\n    }\r\n    /**\r\n     * Shuffles the elements of an array.\r\n     * @param array The array to be shuffled.\r\n     * @returns The shuffled array.\r\n     */\r\n    shuffleArray(array) {\r\n        for (let i = array.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [array[i], array[j]] = [array[j], array[i]]; // Swap elements at indices i and j\r\n        }\r\n        return array;\r\n    }\r\n    playReelSpinSound() {\r\n        const spinSound = new Howl({\r\n            src: ['assets/music/tribalBG.mp3'],\r\n            loop: true, volume: 0.25\r\n        });\r\n        bgMusic.play();\r\n    }\r\n}\r\nexports.Reel = Reel;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scenes/Reel.ts\n");

/***/ })

})