webpackHotUpdate("main",{

/***/ "./src/scenes/Reel.ts":
/*!****************************!*\
  !*** ./src/scenes/Reel.ts ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst pixi_js_1 = __webpack_require__(/*! pixi.js */ \"./node_modules/pixi.js/lib/pixi.es.js\");\r\nconst Symbol_1 = __webpack_require__(/*! ./Symbol */ \"./src/scenes/Symbol.ts\");\r\nconst PIXI = __webpack_require__(/*! pixi.js */ \"./node_modules/pixi.js/lib/pixi.es.js\");\r\nconst gsap_1 = __webpack_require__(/*! gsap */ \"./node_modules/gsap/index.js\");\r\nconst EventEmitter_1 = __webpack_require__(/*! ../system/EventEmitter */ \"./src/system/EventEmitter.ts\");\r\nconst NotificationNames_1 = __webpack_require__(/*! ../system/NotificationNames */ \"./src/system/NotificationNames.ts\");\r\nconst Units_1 = __webpack_require__(/*! ../system/Units */ \"./src/system/Units.ts\");\r\nconst howler_1 = __webpack_require__(/*! howler */ \"./node_modules/howler/dist/howler.js\");\r\n/**\r\n * Represents a single spinning reel in a slot machine game.\r\n */\r\nclass Reel extends pixi_js_1.Container {\r\n    /**\r\n     * Creates an instance of Reel.\r\n     */\r\n    constructor(reelId) {\r\n        super();\r\n        this._symArray = [];\r\n        this._symbolsPool = [];\r\n        this._spinDuration = 3;\r\n        this._reelId = reelId;\r\n        this.populateSymbolPool();\r\n        this.addInitialSymbol();\r\n        this.addMask();\r\n        this.initSounds();\r\n    }\r\n    /**\r\n     * Populates the symbol pool with textures for spinning.\r\n     */\r\n    populateSymbolPool() {\r\n        for (let i = 1; i < 15; i++) {\r\n            let randomIndex = Math.floor(gsap_1.default.utils.random(1, 8));\r\n            let texture = PIXI.Loader.shared.resources['symbol' + randomIndex].texture;\r\n            let sym = new Symbol_1.Symbol(texture);\r\n            this._symbolsPool.push(sym);\r\n        }\r\n    }\r\n    /**\r\n     * Adds the initial symbol to the reel.\r\n     */\r\n    addInitialSymbol() {\r\n        let randomIndex = Math.floor(gsap_1.default.utils.random(1, 8));\r\n        let texture = PIXI.Loader.shared.resources['symbol' + randomIndex].texture;\r\n        this._symbol = new Symbol_1.Symbol(texture);\r\n        this._symArray.push(this._symbol);\r\n        this.addChild(this._symbol);\r\n    }\r\n    /**\r\n    * Adds a mask to the reel to clip displayed symbols.\r\n    */\r\n    addMask() {\r\n        // Determine the dimensions of the _symbol\r\n        const symbolWidth = this._symbol.width;\r\n        const symbolHeight = this._symbol.height;\r\n        // Create a mask with the same size as the _symbol\r\n        const mask = new pixi_js_1.Graphics();\r\n        mask.beginFill(0xffffff);\r\n        mask.drawRect(0, 0, symbolWidth, symbolHeight);\r\n        mask.endFill();\r\n        // Apply the mask to the _symbol\r\n        this.mask = mask;\r\n        // Add the mask to the container\r\n        this.addChild(mask);\r\n    }\r\n    /**\r\n     * Adds symbols to the virtual reel for spinning.\r\n     */\r\n    addVirtualReels() {\r\n        this._symbolsPool = this.shuffleArray(this._symbolsPool);\r\n        for (let i = 1; i < this._symbolsPool.length; i++) {\r\n            let sym = this._symbolsPool[i];\r\n            sym.x = this._symbol.x;\r\n            sym.y = this._symbol.y - (this._symbol.height * i);\r\n            this.addChild(sym);\r\n            this._symArray.push(sym);\r\n        }\r\n    }\r\n    /**\r\n      * Adds the landing symbol to the reel after spinning.\r\n      */\r\n    addLandingSymbol() {\r\n        // random landing symbol\r\n        let randomIndex = Math.floor(gsap_1.default.utils.random(1, 8));\r\n        let landingTexture = PIXI.Loader.shared.resources['symbol' + randomIndex].texture;\r\n        this._landingSymbol = new Symbol_1.Symbol(landingTexture);\r\n        this._landingSymbol.x = this._symArray[0].x;\r\n        this._landingSymbol.y = this._symArray[this._symArray.length - 1].y - this._symArray[0].height;\r\n        this._symArray.push(this._landingSymbol);\r\n        this.addChild(this._landingSymbol);\r\n    }\r\n    /**\r\n     * Initiates the spin animation of the reel\r\n     */\r\n    spinReel() {\r\n        this.addVirtualReels();\r\n        this.addLandingSymbol();\r\n        this._reelSpinSound.play();\r\n        for (let i = 0; i < this._symArray.length; i++) {\r\n            gsap_1.default.to(this._symArray[i], {\r\n                y: this._symArray[i].y + this._symArray[i].height * (this._symArray.length - 1), duration: this._spinDuration, ease: \"power1.inOut\", onComplete: () => {\r\n                    if (i == this._symArray.length - 1) {\r\n                        this._reelStopSound.play();\r\n                        this.resetReels();\r\n                        // last reel finished spinning\r\n                        if (this._reelId == Units_1.Units.MAX_REELS_NUMBER - 1) {\r\n                            EventEmitter_1.EventEmitter.getInstance().emit(NotificationNames_1.NotificationNames.REELS_SPIN_STOPPED);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Resets the reel to its initial state after spinning.\r\n     */\r\n    resetReels() {\r\n        this._symbol = this._landingSymbol;\r\n        this._symArray = [];\r\n        this._symArray.push(this._symbol);\r\n    }\r\n    /**\r\n     * Shuffles the elements of an array.\r\n     * @param array The array to be shuffled.\r\n     * @returns The shuffled array.\r\n     */\r\n    shuffleArray(array) {\r\n        for (let i = array.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [array[i], array[j]] = [array[j], array[i]]; // Swap elements at indices i and j\r\n        }\r\n        return array;\r\n    }\r\n    /**\r\n     * Initializes sounds used in this class.\r\n     */\r\n    initSounds() {\r\n        this._reelSpinSound = new howler_1.Howl({\r\n            src: ['assets/music/reelSpin.mp3'],\r\n            loop: false, volume: 1\r\n        });\r\n        this._reelStopSound = new howler_1.Howl({\r\n            src: ['assets/music/reelStop.mp3'],\r\n            loop: false, volume: 0.05\r\n        });\r\n    }\r\n}\r\nexports.Reel = Reel;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2NlbmVzL1JlZWwudHMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvc2NlbmVzL1JlZWwudHM/ZDJlYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb250YWluZXIsIEdyYXBoaWNzIH0gZnJvbSBcInBpeGkuanNcIjtcclxuaW1wb3J0IHsgU3ltYm9sIH0gZnJvbSAnLi9TeW1ib2wnO1xyXG5pbXBvcnQgKiBhcyBQSVhJIGZyb20gJ3BpeGkuanMnO1xyXG5pbXBvcnQgZ3NhcCBmcm9tIFwiZ3NhcFwiO1xyXG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tIFwiLi4vc3lzdGVtL0V2ZW50RW1pdHRlclwiO1xyXG5pbXBvcnQgeyBOb3RpZmljYXRpb25OYW1lcyB9IGZyb20gXCIuLi9zeXN0ZW0vTm90aWZpY2F0aW9uTmFtZXNcIjtcclxuaW1wb3J0IHsgVW5pdHMgfSBmcm9tIFwiLi4vc3lzdGVtL1VuaXRzXCI7XHJcblxyXG5pbXBvcnQgeyBIb3dsIH0gZnJvbSAnaG93bGVyJztcclxuLyoqXHJcbiAqIFJlcHJlc2VudHMgYSBzaW5nbGUgc3Bpbm5pbmcgcmVlbCBpbiBhIHNsb3QgbWFjaGluZSBnYW1lLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFJlZWwgZXh0ZW5kcyBDb250YWluZXIge1xyXG5cclxuICAgIHByaXZhdGUgX3N5bUFycmF5OiBBcnJheTxTeW1ib2w+ID0gW107XHJcbiAgICBwcml2YXRlIF9sYW5kaW5nU3ltYm9sOiBTeW1ib2w7XHJcbiAgICBwcml2YXRlIF9zeW1ib2xzUG9vbDogQXJyYXk8U3ltYm9sPiA9IFtdO1xyXG4gICAgcHJpdmF0ZSBfcmVlbElkOiBudW1iZXI7XHJcbiAgICBwcml2YXRlIF9yZWVsU3BpblNvdW5kOiBIb3dsO1xyXG4gICAgcHJpdmF0ZSBfcmVlbFN0b3BTb3VuZDogSG93bDtcclxuXHJcbiAgICBwdWJsaWMgX3N5bWJvbDogU3ltYm9sO1xyXG4gICAgcHVibGljIF9zcGluRHVyYXRpb246IG51bWJlciA9IDM7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIFJlZWwuXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHJlZWxJZDogbnVtYmVyKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLl9yZWVsSWQgPSByZWVsSWQ7XHJcbiAgICAgICAgdGhpcy5wb3B1bGF0ZVN5bWJvbFBvb2woKTtcclxuICAgICAgICB0aGlzLmFkZEluaXRpYWxTeW1ib2woKTtcclxuICAgICAgICB0aGlzLmFkZE1hc2soKTtcclxuICAgICAgICB0aGlzLmluaXRTb3VuZHMoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFBvcHVsYXRlcyB0aGUgc3ltYm9sIHBvb2wgd2l0aCB0ZXh0dXJlcyBmb3Igc3Bpbm5pbmcuXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgcG9wdWxhdGVTeW1ib2xQb29sKCk6IHZvaWQge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgMTU7IGkrKykge1xyXG4gICAgICAgICAgICBsZXQgcmFuZG9tSW5kZXggPSBNYXRoLmZsb29yKGdzYXAudXRpbHMucmFuZG9tKDEsIDgpKTtcclxuICAgICAgICAgICAgbGV0IHRleHR1cmUgPSBQSVhJLkxvYWRlci5zaGFyZWQucmVzb3VyY2VzWydzeW1ib2wnICsgcmFuZG9tSW5kZXhdLnRleHR1cmU7XHJcbiAgICAgICAgICAgIGxldCBzeW0gPSBuZXcgU3ltYm9sKHRleHR1cmUpO1xyXG4gICAgICAgICAgICB0aGlzLl9zeW1ib2xzUG9vbC5wdXNoKHN5bSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWRkcyB0aGUgaW5pdGlhbCBzeW1ib2wgdG8gdGhlIHJlZWwuXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgYWRkSW5pdGlhbFN5bWJvbCgpOiB2b2lkIHtcclxuICAgICAgICBsZXQgcmFuZG9tSW5kZXggPSBNYXRoLmZsb29yKGdzYXAudXRpbHMucmFuZG9tKDEsIDgpKTtcclxuICAgICAgICBsZXQgdGV4dHVyZSA9IFBJWEkuTG9hZGVyLnNoYXJlZC5yZXNvdXJjZXNbJ3N5bWJvbCcgKyByYW5kb21JbmRleF0udGV4dHVyZTtcclxuICAgICAgICB0aGlzLl9zeW1ib2wgPSBuZXcgU3ltYm9sKHRleHR1cmUpO1xyXG4gICAgICAgIHRoaXMuX3N5bUFycmF5LnB1c2godGhpcy5fc3ltYm9sKTtcclxuICAgICAgICB0aGlzLmFkZENoaWxkKHRoaXMuX3N5bWJvbCk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgKiBBZGRzIGEgbWFzayB0byB0aGUgcmVlbCB0byBjbGlwIGRpc3BsYXllZCBzeW1ib2xzLlxyXG4gICAgKi9cclxuICAgIHByaXZhdGUgYWRkTWFzaygpOiB2b2lkIHtcclxuICAgICAgICAvLyBEZXRlcm1pbmUgdGhlIGRpbWVuc2lvbnMgb2YgdGhlIF9zeW1ib2xcclxuICAgICAgICBjb25zdCBzeW1ib2xXaWR0aCA9IHRoaXMuX3N5bWJvbC53aWR0aDtcclxuICAgICAgICBjb25zdCBzeW1ib2xIZWlnaHQgPSB0aGlzLl9zeW1ib2wuaGVpZ2h0O1xyXG5cclxuICAgICAgICAvLyBDcmVhdGUgYSBtYXNrIHdpdGggdGhlIHNhbWUgc2l6ZSBhcyB0aGUgX3N5bWJvbFxyXG4gICAgICAgIGNvbnN0IG1hc2sgPSBuZXcgR3JhcGhpY3MoKTtcclxuICAgICAgICBtYXNrLmJlZ2luRmlsbCgweGZmZmZmZik7XHJcbiAgICAgICAgbWFzay5kcmF3UmVjdCgwLCAwLCBzeW1ib2xXaWR0aCwgc3ltYm9sSGVpZ2h0KTtcclxuICAgICAgICBtYXNrLmVuZEZpbGwoKTtcclxuXHJcbiAgICAgICAgLy8gQXBwbHkgdGhlIG1hc2sgdG8gdGhlIF9zeW1ib2xcclxuICAgICAgICB0aGlzLm1hc2sgPSBtYXNrO1xyXG5cclxuICAgICAgICAvLyBBZGQgdGhlIG1hc2sgdG8gdGhlIGNvbnRhaW5lclxyXG4gICAgICAgIHRoaXMuYWRkQ2hpbGQobWFzayk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGRzIHN5bWJvbHMgdG8gdGhlIHZpcnR1YWwgcmVlbCBmb3Igc3Bpbm5pbmcuXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgYWRkVmlydHVhbFJlZWxzKCk6IHZvaWQge1xyXG5cclxuICAgICAgICB0aGlzLl9zeW1ib2xzUG9vbCA9IHRoaXMuc2h1ZmZsZUFycmF5KHRoaXMuX3N5bWJvbHNQb29sKTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCB0aGlzLl9zeW1ib2xzUG9vbC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBsZXQgc3ltID0gdGhpcy5fc3ltYm9sc1Bvb2xbaV07XHJcbiAgICAgICAgICAgIHN5bS54ID0gdGhpcy5fc3ltYm9sLng7XHJcbiAgICAgICAgICAgIHN5bS55ID0gdGhpcy5fc3ltYm9sLnkgLSAodGhpcy5fc3ltYm9sLmhlaWdodCAqIGkpO1xyXG4gICAgICAgICAgICB0aGlzLmFkZENoaWxkKHN5bSk7XHJcbiAgICAgICAgICAgIHRoaXMuX3N5bUFycmF5LnB1c2goc3ltKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgICogQWRkcyB0aGUgbGFuZGluZyBzeW1ib2wgdG8gdGhlIHJlZWwgYWZ0ZXIgc3Bpbm5pbmcuXHJcbiAgICAgICovXHJcbiAgICBwcml2YXRlIGFkZExhbmRpbmdTeW1ib2woKTogdm9pZCB7XHJcbiAgICAgICAgLy8gcmFuZG9tIGxhbmRpbmcgc3ltYm9sXHJcbiAgICAgICAgbGV0IHJhbmRvbUluZGV4ID0gTWF0aC5mbG9vcihnc2FwLnV0aWxzLnJhbmRvbSgxLCA4KSk7XHJcbiAgICAgICAgbGV0IGxhbmRpbmdUZXh0dXJlID0gUElYSS5Mb2FkZXIuc2hhcmVkLnJlc291cmNlc1snc3ltYm9sJyArIHJhbmRvbUluZGV4XS50ZXh0dXJlO1xyXG4gICAgICAgIHRoaXMuX2xhbmRpbmdTeW1ib2wgPSBuZXcgU3ltYm9sKGxhbmRpbmdUZXh0dXJlKTtcclxuICAgICAgICB0aGlzLl9sYW5kaW5nU3ltYm9sLnggPSB0aGlzLl9zeW1BcnJheVswXS54O1xyXG4gICAgICAgIHRoaXMuX2xhbmRpbmdTeW1ib2wueSA9IHRoaXMuX3N5bUFycmF5W3RoaXMuX3N5bUFycmF5Lmxlbmd0aCAtIDFdLnkgLSB0aGlzLl9zeW1BcnJheVswXS5oZWlnaHQ7XHJcblxyXG4gICAgICAgIHRoaXMuX3N5bUFycmF5LnB1c2godGhpcy5fbGFuZGluZ1N5bWJvbCk7XHJcbiAgICAgICAgdGhpcy5hZGRDaGlsZCh0aGlzLl9sYW5kaW5nU3ltYm9sKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEluaXRpYXRlcyB0aGUgc3BpbiBhbmltYXRpb24gb2YgdGhlIHJlZWxcclxuICAgICAqL1xyXG4gICAgcHVibGljIHNwaW5SZWVsKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuYWRkVmlydHVhbFJlZWxzKCk7XHJcbiAgICAgICAgdGhpcy5hZGRMYW5kaW5nU3ltYm9sKCk7XHJcbiAgICAgICAgdGhpcy5fcmVlbFNwaW5Tb3VuZC5wbGF5KCk7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fc3ltQXJyYXkubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgZ3NhcC50byh0aGlzLl9zeW1BcnJheVtpXSwge1xyXG4gICAgICAgICAgICAgICAgeTogdGhpcy5fc3ltQXJyYXlbaV0ueSArIHRoaXMuX3N5bUFycmF5W2ldLmhlaWdodCAqICh0aGlzLl9zeW1BcnJheS5sZW5ndGggLSAxKSwgZHVyYXRpb246IHRoaXMuX3NwaW5EdXJhdGlvbiwgZWFzZTogXCJwb3dlcjEuaW5PdXRcIiwgb25Db21wbGV0ZTogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpID09IHRoaXMuX3N5bUFycmF5Lmxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVlbFN0b3BTb3VuZC5wbGF5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVzZXRSZWVscygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBsYXN0IHJlZWwgZmluaXNoZWQgc3Bpbm5pbmdcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3JlZWxJZCA9PSBVbml0cy5NQVhfUkVFTFNfTlVNQkVSIC0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRXZlbnRFbWl0dGVyLmdldEluc3RhbmNlKCkuZW1pdChOb3RpZmljYXRpb25OYW1lcy5SRUVMU19TUElOX1NUT1BQRUQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlc2V0cyB0aGUgcmVlbCB0byBpdHMgaW5pdGlhbCBzdGF0ZSBhZnRlciBzcGlubmluZy5cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSByZXNldFJlZWxzKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX3N5bWJvbCA9IHRoaXMuX2xhbmRpbmdTeW1ib2w7XHJcbiAgICAgICAgdGhpcy5fc3ltQXJyYXkgPSBbXTtcclxuICAgICAgICB0aGlzLl9zeW1BcnJheS5wdXNoKHRoaXMuX3N5bWJvbCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTaHVmZmxlcyB0aGUgZWxlbWVudHMgb2YgYW4gYXJyYXkuXHJcbiAgICAgKiBAcGFyYW0gYXJyYXkgVGhlIGFycmF5IHRvIGJlIHNodWZmbGVkLlxyXG4gICAgICogQHJldHVybnMgVGhlIHNodWZmbGVkIGFycmF5LlxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIHNodWZmbGVBcnJheTxUPihhcnJheTogVFtdKTogVFtdIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gYXJyYXkubGVuZ3RoIC0gMTsgaSA+IDA7IGktLSkge1xyXG4gICAgICAgICAgICBjb25zdCBqID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKGkgKyAxKSk7XHJcbiAgICAgICAgICAgIFthcnJheVtpXSwgYXJyYXlbal1dID0gW2FycmF5W2pdLCBhcnJheVtpXV07IC8vIFN3YXAgZWxlbWVudHMgYXQgaW5kaWNlcyBpIGFuZCBqXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBhcnJheTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEluaXRpYWxpemVzIHNvdW5kcyB1c2VkIGluIHRoaXMgY2xhc3MuXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgaW5pdFNvdW5kcygpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9yZWVsU3BpblNvdW5kID0gbmV3IEhvd2woe1xyXG4gICAgICAgICAgICBzcmM6IFsnYXNzZXRzL211c2ljL3JlZWxTcGluLm1wMyddLFxyXG4gICAgICAgICAgICBsb29wOiBmYWxzZSwgdm9sdW1lOiAxXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuX3JlZWxTdG9wU291bmQgPSBuZXcgSG93bCh7XHJcbiAgICAgICAgICAgIHNyYzogWydhc3NldHMvbXVzaWMvcmVlbFN0b3AubXAzJ10sXHJcbiAgICAgICAgICAgIGxvb3A6IGZhbHNlLCB2b2x1bWU6IDAuMDVcclxuICAgICAgICB9KTtcclxuXHJcbiAgICB9XHJcblxyXG59Il0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBWUE7O0FBRUE7QUFDQTtBQUNBO0FBZEE7QUFFQTtBQU1BO0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQXBLQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/scenes/Reel.ts\n");

/***/ }),

/***/ "./src/scenes/Reels.ts":
/*!*****************************!*\
  !*** ./src/scenes/Reels.ts ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst pixi_js_1 = __webpack_require__(/*! pixi.js */ \"./node_modules/pixi.js/lib/pixi.es.js\");\r\nconst Reel_1 = __webpack_require__(/*! ./Reel */ \"./src/scenes/Reel.ts\");\r\nconst PIXI = __webpack_require__(/*! pixi.js */ \"./node_modules/pixi.js/lib/pixi.es.js\");\r\nconst gsap_1 = __webpack_require__(/*! gsap */ \"./node_modules/gsap/index.js\");\r\nconst Units_1 = __webpack_require__(/*! ../system/Units */ \"./src/system/Units.ts\");\r\nconst EventEmitter_1 = __webpack_require__(/*! ../system/EventEmitter */ \"./src/system/EventEmitter.ts\");\r\nconst NotificationNames_1 = __webpack_require__(/*! ../system/NotificationNames */ \"./src/system/NotificationNames.ts\");\r\nconst Symbol_1 = __webpack_require__(/*! ./Symbol */ \"./src/scenes/Symbol.ts\");\r\nconst howler_1 = __webpack_require__(/*! howler */ \"./node_modules/howler/dist/howler.js\");\r\n/**\r\n * Represents a collection of spinning reels in a slot machine game.\r\n */\r\nclass Reels extends pixi_js_1.Container {\r\n    constructor() {\r\n        super();\r\n        this._reelsNumber = Units_1.Units.MAX_REELS_NUMBER;\r\n        this._reelsSpacer = 1.02;\r\n        this._reelsArray = [];\r\n        this._reelsSpinDelay = 0.1;\r\n        this._topSymbols = [];\r\n        this.initReels();\r\n        this.addReelsFrame();\r\n        this.initSounds();\r\n        EventEmitter_1.EventEmitter.getInstance().on(NotificationNames_1.NotificationNames.REELS_SPIN_STOPPED, this.getTopSymbols.bind(this));\r\n    }\r\n    /**\r\n     * Initializes the reels by creating instances of the Reel class and positioning them horizontally.\r\n     */\r\n    initReels() {\r\n        for (let i = 0; i < this._reelsNumber; i++) {\r\n            var reel = new Reel_1.Reel(i);\r\n            this._reelsArray.push(reel);\r\n            this.addChild(reel);\r\n            reel.x = reel.width * i * this._reelsSpacer;\r\n        }\r\n    }\r\n    /**\r\n     * Initializes sounds used in this class.\r\n     */\r\n    initSounds() {\r\n        this._winSound = new howler_1.Howl({\r\n            src: ['assets/music/winningSound.mp3'],\r\n            loop: false, volume: 1\r\n        });\r\n    }\r\n    /**\r\n      * Adds a frame around the collection of reels.\r\n      */\r\n    addReelsFrame() {\r\n        const frame = new PIXI.Graphics();\r\n        const xPos = this._reelsArray[0]._symbol.x - 5;\r\n        const yPos = this._reelsArray[0]._symbol.y - 5;\r\n        const frameWidth = this._reelsArray[0]._symbol.width * this._reelsNumber * this._reelsSpacer + 5;\r\n        const frameHeight = this._reelsArray[0]._symbol.y + this._reelsArray[0]._symbol.height + 10;\r\n        frame.lineStyle(10, 0xBEBEBE);\r\n        frame.drawRect(xPos, yPos, frameWidth, frameHeight);\r\n        this.addChild(frame);\r\n    }\r\n    /**\r\n     * Initiates the spinning animation for each reel in the collection.\r\n    */\r\n    startSpin() {\r\n        this.resetTopSymbol();\r\n        for (let i = 0; i < this._reelsArray.length; i++) {\r\n            gsap_1.default.delayedCall(this._reelsSpinDelay * i, () => {\r\n                this._reelsArray[i].spinReel();\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Retrieves the top symbols from each reel and prepares them for animation.\r\n     */\r\n    getTopSymbols() {\r\n        for (let i = 0; i < this._reelsArray.length; i++) {\r\n            var sym = new Symbol_1.Symbol(this._reelsArray[i]._symbol.getSymbolTexture());\r\n            sym.pivot.set(sym.width * 0.5, sym.height * 0.5);\r\n            sym.x = this._reelsArray[i].x + sym.width * 0.5;\r\n            sym.y = sym.y + sym.height * 0.5;\r\n            this._topSymbols.push(sym);\r\n            this.addChild(sym);\r\n        }\r\n        this.checkForWins();\r\n        this.animatTopSymbols();\r\n    }\r\n    /**\r\n     * Checks if there is a winning combination on the top symbols\r\n     */\r\n    checkForWins() {\r\n        this._winSound.play();\r\n        if (this._topSymbols.length != this._reelsArray.length) {\r\n            throw new Error(\"Invalid number of top symbols\");\r\n        }\r\n        // generate an array of textures corresponding to each top symbol\r\n        const textures = this._topSymbols.map(symbol => symbol.getSymbolTexture());\r\n        // Check for all three symbols being the same\r\n        if (textures[0] === textures[1] && textures[0] === textures[2]) {\r\n            // All three symbols are winning symbols\r\n            return;\r\n        }\r\n        // Check for first two symbols being the same\r\n        if (textures[0] === textures[1]) {\r\n            this.removeChild(this._topSymbols[2]);\r\n            this._topSymbols.pop(); // Remove last element from array\r\n            return;\r\n        }\r\n        // Check for last two symbols being the same\r\n        if (textures[1] === textures[2]) {\r\n            this.removeChild(this._topSymbols[0]);\r\n            this._topSymbols.shift(); // Remove first element from array\r\n            return;\r\n        }\r\n        // Check for first and last symbols being the same\r\n        if (textures[0] === textures[2]) {\r\n            this.removeChild(this._topSymbols[1]);\r\n            // Remove middle element from array\r\n            this._topSymbols.splice(1, 1);\r\n            return;\r\n        }\r\n        this._winSound.stop();\r\n        // No wins\r\n        this.resetTopSymbol();\r\n    }\r\n    /**\r\n     * Animates the top symbols by calling the animateSymbol method.\r\n     */\r\n    animatTopSymbols() {\r\n        this.animateSymbol();\r\n    }\r\n    /**\r\n     *\r\n     * Animates a single symbol in the top symbols array.\r\n     * @param currentSymbolIndex The index of the symbol to animate. Defaults to 0.\r\n     */\r\n    animateSymbol(currentSymbolIndex = 0) {\r\n        if (this._topSymbols[currentSymbolIndex] == null) {\r\n            return;\r\n        }\r\n        let animationDelay = 0.25;\r\n        this.setChildIndex(this._topSymbols[currentSymbolIndex], this.children.length - 1);\r\n        gsap_1.default.to(this._topSymbols[currentSymbolIndex].scale, {\r\n            duration: 0.25, x: 1.25, y: 1.25, onComplete: () => {\r\n                // check if the symbol was not removed during the first tween\r\n                if (this._topSymbols[currentSymbolIndex] == null) {\r\n                    return;\r\n                }\r\n                gsap_1.default.to(this._topSymbols[currentSymbolIndex].scale, { duration: 0.25, x: 1, y: 1 });\r\n                currentSymbolIndex++;\r\n                if (currentSymbolIndex == this._topSymbols.length) {\r\n                    animationDelay = 1;\r\n                    currentSymbolIndex = 0;\r\n                }\r\n                gsap_1.default.delayedCall(animationDelay, () => {\r\n                    this.animateSymbol(currentSymbolIndex);\r\n                });\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Resets the top symbols array by removing all symbols from the display list and clearing the array.\r\n     */\r\n    resetTopSymbol() {\r\n        for (let i = 0; i < this._topSymbols.length; i++) {\r\n            this.removeChild(this._topSymbols[i]);\r\n        }\r\n        this._topSymbols = [];\r\n    }\r\n}\r\nexports.Reels = Reels;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scenes/Reels.ts\n");

/***/ })

})